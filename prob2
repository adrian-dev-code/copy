#include <xc.h>

__PROG_CONFIG(1, 0x3FE4); // config. uC (WDT=dis|OSC=int)
__PROG_CONFIG(2, 0x3EFF); // config. uC (PLL (OSC*4)=off) pag. 130 pdf. PIC16LF1937
#define _XTAL_FREQ 8000000 // 8MHz (ptr. __delay())
unsigned char a = 0;
unsigned char buton_start, buton_intermediar, buton_stop, buton_reset, sec, sm, sec_int, sm_int, sec_stop, sm_stop, sec_afis, sm_afis, toogle;
unsigned char cifra[10] = {
  0xC0,
  0xF9,
  0xA4,
  0xB0,
  0x99,
  0x92,
  0x82,
  0xF8,
  0x80,
  0x90
};
unsigned char digit[5] = {
  0xFE,
  0xFD,
  0xFB,
  0xF7,
  0xFF
};
unsigned int c;
void init(void);
void interrupt ia2(void); // functie de intreruperi globala ptr. TOATE intreruperile
void main(void) {
  init();

  while (1) // bucla infinita
  {
    if (RA1 == 0) buton_start = 1;
    if (RA3 == 0) buton_intermediar = 1;
    if (RA2 == 0) {
      __delay_ms(1000);
      if (RA2 == 1) buton_stop = 1;
      else buton_reset = 1;
    }

    while (buton_start) {
      if (c >= 40) {
        c = 0;
        sm++;
        if (sm > 9) {
          sm = 0;
          sec++;

        }
        if (RA3 == 0) {
          sec_int = sec;
          sm_int = sm;
        }
        if (RA2 == 0) {
          sec_stop = sec;
          sm_stop = sm;
          buton_start = 0;
        }

      }
      if (sec == 9 && sm == 9)
        buton_start = 0;

      sec_afis = sec;
      sm_afis = sm;
    }

    if (buton_intermediar) {
      buton_intermediar = 0;
      if (toogle == 0) {
        sec_afis = sec_int;
        sm_afis = sm_int;
        RA0 = 1;
        toogle = 1;
      }
    } else {
      sec_afis = sec_stop;
      sm_afis = sec_stop;
      toogle = 0;
      RA0 = 0;
    }

  }
}
void init(void) {
  OSCCON = 0x73; // REGLEAZA OSCILATORUL PE 8 MHz (PLL dezactivat)
  ANSELB = 0x00; // pinii portului B sa fie digitali
  TRISB = 0x00; // tot portul B este de iesire
  PORTB = 0xFF; // am digit Anod Comun, vreau ca digitii sa fie stinsi
  TRISC = 0xFF; // portul C
  TRISA = 0b11111110;
  ANSELD = 0x00; // pinii portului D sa fie digitali
  TRISD = 0x00; // tot portul D este de iesire
  PORTD = 0xFF; // am digit Anod Comun, vreau ca segmentele sa fie stinse
  T1CON = 0x11; // initializarea Timer T1
  // (Fosc/4); prescaler 1:2 => Fosc_timer1=1MHz(T=1us)
  TMR1IE = 1; // activez intreruperea ptr. T1
  PEIE = 1; // intreruperea T1 face parte din "extra intreruperi"
  GIE = 1; // activez Global intreruperile
  PORTC = 0x00;
}
void interrupt ia2(void) // every 2,5ms !!!
{ //
  if (TMR1IF) // timerul T1 a generat intreruperea ?
  {
    TMR1IF = 0; // obligatoriu - sterg flagul Timerului care a generat intreruperea
    TMR1H = 0xF6; // 65535us-2500us=63035us=F63B (in hexa) [incarc octetul superior]
    TMR1L = 0x3B; // (2500us=2,5ms) [incarc octetul inferior al timerului T1]
    c++;
    switch (a++) // executa instructiunea SWITCH si apoi incrementeaza
    {
    case 0:
      PORTB = digit[4]; // "stinge" toti digitii
      PORTD = cifra[sec_afis]; // afiseaza cifra
      PORTB = digit[2]; // activeaza digitul
      break;
    case 1:
      PORTB = digit[4]; // "stinge" toti digitii
      PORTD = cifra[sm_afis]; // afiseaza cifra
      PORTB = digit[3]; // activeaza digitul
      a = 0;
      break;
    default:
      break;
    } // end switch
  } // end if
} // end interrup
